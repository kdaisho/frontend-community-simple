import { Pool } from 'pg'
import { Kysely, PostgresDialect, Generated, ColumnType } from 'kysely'

interface PersonTable {
    // Columns that are generated by the database should be marked
    // using the `Generated` type. This way they are automatically
    // made optional in inserts and updates.
    id: Generated<number>

    first_name: string
    gender: 'male' | 'female' | 'other'

    // If the column is nullable in the database, make its type nullable.
    // Don't use optional properties. Optionality is always determined
    // automatically by Kysely.
    last_name: string | null

    // You can specify a different type for each operation (select, insert and
    // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
    // wrapper. Here we define a column `modified_at` that is selected as
    // a `Date`, can optionally be provided as a `string` in inserts and
    // can never be updated:
    modified_at: ColumnType<Date, string | undefined, never>
}

// Keys of this interface are table names.
export interface Database {
    person: PersonTable
}

// You'd create one of these when you start your app.
const db = new Kysely<Database>({
    // Use MysqlDialect for MySQL and SqliteDialect for SQLite.
    dialect: new PostgresDialect({
        pool: new Pool({
            connectionString:
                'postgresql://postgres:lol@localhost:5432/todo?schema=public',
        }),
    }),
})

async function demo() {
    const { id } = await db
        .insertInto('person')
        .values({ first_name: 'Jennifer', gender: 'female' })
        .returning('id')
        .executeTakeFirstOrThrow()

    console.log('DONE! ==>', id)
}

demo()
